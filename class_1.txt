### GROUP D14

##Q1: Bogard Corporation
## FILE
max:8S+6N+10W;
0.2S+0.4N+0.6W<=150;
0.6S+0.2N+0.4W<=150;
0.4S+0.4N+0.4W<=200;

## RUNLOG

> x1 = read.lp("d:\\question1.txt" , "lp")
> solve (x1); get.objective(x1);get.variables(x1);
[1] 0
[1] 3000
[1] 150 300  0

## ANSWERS:

1)The production plan would be to produce 150,300, and 0 units of standard, narrow, and 
  wide bookshelves, respectively,The maximum profit is $3000 (dollars).


##Q2: Rangan Snack Cart

##FILE
min:20I+5D;
5I+2D>=40;

## RUNLOG
> library(lpSolveAPI)
> x2<- read.lp("d:\\question2.txt","lp")
> solve(x2); get.objective(x2);get.variables(x2)
[1] 0
[1] 100
[1]  0 20
> initial<-40
> batter<-c(5,2)
> usage<-sum(get.variables(x2)*batter)
> left_after_usage<-initial-sum(get.variables(x2)*batter)
> usage; left_after_usage;
[1] 40
[1] 0


## ANSWERS:

1) Rangan would be able to deliver 0 plates of idli and 20 plates of dosa under the 
   constraint of having the minimum stove run time. The stove run time is 100mins

2) He will be using 40oz of batter ( 20 plates of dosa each using 2oz 
   of batter) which is equal to the amount of batter that he had initially prepared.
   So he will have to make more batter only if he decides to deliver snacks even after the
   desired minimal run time (100mins).
   
   

##Q3:TAMU Facilities 

## FILE:

min:10A+8S+7D;
20A+10S+15D>=12;
10A+5S+10D>=14;
5A+15S+5D>=18;

## RUNLOG:

> library(lpSolveAPI)
> x3 = read.lp("d:\\question3.txt" , "lp")
> solve (x3); get.objective(x3); get.variables(x3)
[1] 0
[1] 13.76
[1] 0.00 0.88 0.96

## ANSWERS:
 
1) In order to satisfy the requirements at minimum cost they will need to buy 0 lbs, 880 lbs,
and 960 lbs of fertilizer A,S, and D, respectively. The minimum cost is 13.76 (dollars).




## Q4: MEAN , MEDIAN AND MODE

## MEAN


x<-c(1,7,7,7,9,9,9,9,2,2,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9)     ##CREATING A NUMERIC VECTOR X
l<-length(x)                                                            ##LENGTH OF THE VECTOR
sum_elements<-sum(x)                                                    ##SUM OF ALL THE ELEMENTS IN THE VECTOR X
x_mean<-sum_elements/length(x)                                          ##CALCULATING MEAN=Î£x/N
           

## MEDIAN 

                                                        ## FIRST WE SORT THE VECTOR

for(i in 1:(length(x)-1)){                              ## CREATING TWO LOOPS IN WHICH EVERY iTH INDEXED ELEMENT in VECTOR X
    for(j in (i+1):length(x)){                          ## IS COMPARED WITH ALL THE OTHER ELEMENTS OF X FROM INDEX i+1
      if(x[i]>x[j]){                                    ## TILL END OF VECTOR X AND IF THE ELEMENT OF VECTOR AT INDEX                                    
        x[c(i,j)]=x[c(j,i)]                             ## (i)>(i+1) WE EXCHANGE THE VALUES
      }
    }
}

                                                        ## NEXT WE FIND THE MIDDLE ELEMENT

if (length(x) %% 2 == 0 )                               ##IF VECTOR HAS EVEN NUMBER OF ELEMENTS MEDIAN IS AVG OF THE MIDDLE TWO NUMBERS OF THE SORTED LIST
{                                                         
  x_median<-(x[(l+1)%/%2]  + x[((l+1)%/%2)+1])/2        
  }else{
  x_median<- x[(l+1)/2]                                 ## IF VECTOR HAS ODD NUMBER OF ELEMENTS MEDIAN IS THE VALUE AT INDEX (N+1)/2 WHERE N IS THE NUMBER OF ELEMENTS IN X
  }


## MODE 

## MODE_CNT IS USED TO TEMPORARILY STORE HOW MANY TIMES A VALUE AT A PARTICULAR INDEX IN VECTOR REPEATS
## MAX_COUNT IS USED TO STORE MAXIMUM VALUE OF MODE_CNT
## X_MODE IS USED TO STORE THE FINAL MODE VALUE
                       
for(i in 1:(length(x)-1)){                             ##EVERY iTH INDEXED ELEMENT in VECTOR X IS COMPARED WITH ALL THE OTHER ELEMENTS OF X FROM INDEX i+1
  for(j in (i+1):length(x)){                           ##TILL END OF VECTOR X AND IF THE ELEMENT OF VECTOR AT INDEX i=i+1 WE INCREASE THE MODE_CNT VALUE.
    if(x[i]==x[j]){
      mode_cnt<-mode_cnt+1
      if(mode_cnt>max_cnt){                            ##IF ELEMENT AT iTH INDEX HAS IT'S MODE_CNT GREATER THAN MAX_COUNT THEN MAX_COUNT VALUE IS REASSIGNED
        max_cnt<-mode_cnt                              ## WITH MODE_CNT AND THE CORRESPONDING ELEMENT AT iTH INDEX IS THE MODE OF THE VECTOR.
        x_mode<-x[i]
        
      }
    }
  }
  mode_cnt<-c(0)                                       ## AFTER EVERY ITERATION OF THE OUTER LOOP SINCE WE WILL BE SHIFTING TO A DIFFERENT VALUE THE MODE_CNT SHOULD BE RESET                   
}














